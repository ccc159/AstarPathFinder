using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Printing;
using System.Linq;
using System.Windows.Forms;
using AstarPathFinder.Properties;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Types;
using Rhino.Display;
using Rhino.Geometry;

namespace AstarPathFinder
{
    public class AstarPathFinderComponent : GH_Component
    {
        private SearchParameters iSearchParameters = null;
        private List<Point3d> iPath = new List<Point3d>();
        private Polyline iCurve = new Polyline();
        private List<Brep> screenedObstacles = new List<Brep>();
        private bool hide = false;
        private bool directpath = true;
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public AstarPathFinderComponent()
          : base("PathFinder", "PathFinder",
              "A solver to instantly find out shortest pass between two points, avoiding given obstacles.",
              "Params", "Util")
        {
            UpdateMessage();
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddPointParameter("StartPoint", "S", "StartPoint of pathfinding", GH_ParamAccess.item);
            pManager.AddPointParameter("EndPoint", "E", "EndPoint of pathfinding", GH_ParamAccess.item);
            pManager.AddBrepParameter("Obstacles", "O", "A list or a brep as obstacle(s)", GH_ParamAccess.list);
            pManager.AddNumberParameter("Resolution", "R", "Defines the subdivision of calculations",
                GH_ParamAccess.item, 6);
            
            pManager[2].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddPointParameter("PathPoints", "P", "output of path as point list", GH_ParamAccess.list);
            pManager.AddCurveParameter("PathCurve", "C", "The path generated by points", GH_ParamAccess.item);
            


        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<Brep> iObstacles = new List<Brep>();
            Point3d iStartPoint = Point3d.Unset;
            Point3d iEndPoint = Point3d.Unset;
            double iResolution = 6;
            if (DA.GetData<Point3d>("StartPoint", ref iStartPoint))return;
            if (DA.GetData<Point3d>("EndPoint", ref iEndPoint)) return;
            if(DA.GetDataList<Brep>("Obstacles", iObstacles))return;
            DA.GetData<double>("Resolution", ref iResolution);
            DA.SetDataList(0, null);
            

            if (iStartPoint.DistanceTo(iEndPoint)<DocumentTolerance())
            {
                this.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "You don't need me if the StartPoint and TargetPoint are identical.\n Try with something else :)");
                return;
            }
            

            directpath = Utils.HaveDirectPath(iStartPoint, iEndPoint, iObstacles);
            if (directpath)
            {
                iPath = new List<Point3d> {iStartPoint, iEndPoint};
                iCurve = new Polyline(iPath);
                DA.SetDataList(0, iPath);
                DA.SetData(1, iCurve);
                screenedObstacles = new List<Brep>();
                return;
            }
            screenedObstacles = Utils.Screenobstacles(iStartPoint, iEndPoint, iObstacles);
            BoundingBox iBoundingBox = Utils.ComputeBoundingBox(Utils.CastToGeometry(iStartPoint, iEndPoint, screenedObstacles));
            if ((iBoundingBox.IsDegenerate(-1) == 0) || (iBoundingBox.IsDegenerate(-1) == 1))
            {
                iSearchParameters = new SearchParameters(iBoundingBox, iStartPoint, iEndPoint, screenedObstacles, iResolution);
                PathFinder iPathFinder = new PathFinder(iSearchParameters);
                iPath = new List<Point3d>();
                iPath = iPathFinder.FindPath();
                //DA.SetDataList(2,iSearchParameters.Points);
                if (iPath.Count == 0)
                {
                    this.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Something went wrong. Could not generate path. Check if start or end point inside obstacles.");
                    return;
                }
                iPath.Add(iEndPoint);
                iPath.Insert(0, iStartPoint);
                iCurve = new Polyline(iPath);
                DA.SetDataList(0, iPath);
                DA.SetData(1, iCurve);
            }
            else if (iBoundingBox.IsDegenerate(-1) == 2)
            {
                iPath = new List<Point3d> { iStartPoint, iEndPoint };
                iCurve = new Polyline(iPath);
                DA.SetDataList(0, iPath);
                DA.SetData(1, iCurve);
            }
            
        }

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// </summary>
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                // You can add image files to your project resources and access them like this:
                //return Resources.IconForThisComponent;
                return Resources.PathFinder;
            }
        }

        public override void DrawViewportWires(IGH_PreviewArgs args)
        {
            Color PointColor = Color.DarkGray;
            Color CurveColor = Color.RoyalBlue;
            Color PathColor = Color.Crimson;
            if (iCurve.IsValid) args.Display.DrawPolyline(iCurve, CurveColor, 5);
            //if (iPath.Count > 1)
            //{
            //    args.Display.DrawPoints(iPath, PointStyle.X, 5, PathColor);
            //    for (int i = 0; i < iPath.Count - 1; i++)
            //    {
            //        Line l = new Line(iPath[i], iPath[i + 1]);
            //        if (l.IsValid) args.Display.DrawLine(l, CurveColor, 5);
            //    }
            //}
            if ((!hide) && (!directpath) && (iSearchParameters != null))
            {
                int x = iSearchParameters.WorldLength;
                int y = iSearchParameters.WorldWidth;
                int z = iSearchParameters.WorldHeight;
                if (iSearchParameters.Points.Length > 0)
                {
                    for (int i = 0; i < x; i++)
                    {
                        for (int j = 0; j < y; j++)
                        {
                            for (int k = 0; k < z; k++)
                            {
                                args.Display.DrawPoint(iSearchParameters.Points[i, j, k], PointColor);
                            }
                        }
                    }
                }
            }

            if ((screenedObstacles == null) || (screenedObstacles.GetType() != typeof(List<Brep>))) return;
            if (screenedObstacles.Count <= 0) return;
            foreach (Brep obstacle in screenedObstacles)
            {
                if (obstacle != null)
                {
                    args.Display.DrawBrepShaded(obstacle, new DisplayMaterial(Color.LightSlateGray));
                }

            }
        }

        //public override void DrawViewportMeshes(IGH_PreviewArgs args)
        //{
        //}


        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("{3af77843-2214-42c1-8b0b-b47a520d711d}"); }
        }

        protected override void AppendAdditionalComponentMenuItems(System.Windows.Forms.ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            ToolStripMenuItem item = Menu_AppendItem(menu, "Show/Hide Grid", HideGrid_Click);
            item.ToolTipText = @"Hide or Show the environment Grid";
        }

        private void HideGrid_Click(object sender, EventArgs e)
        {
            hide = !hide;
            if (hide) this.Message = "GridHidden";
            if (!hide) this.Message = "GridShown";
            ExpireSolution(true);
        }

        private void UpdateMessage()
        {
            if (hide) this.Message = "GridHidden";
            if (!hide) this.Message = "GridShown";
        }
        
    }
}
